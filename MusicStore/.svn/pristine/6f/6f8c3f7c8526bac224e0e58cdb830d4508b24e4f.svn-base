package controller.track;

import java.io.Serializable;

import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;

import model.Artist;
import model.Track;
import service.ArtistEJB;
import service.TrackEJB;

@Named
@SessionScoped
public class TrackController implements Serializable {
	private static final long serialVersionUID = 1L;

	@Inject
	private TrackEJB trackEJB;
	

	private Track trackToBeCreated;
	private Artist artistOfAlbumWhoWillBeAdded;

	public void save() {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		FacesMessage successMessage;
		boolean isCreated = trackEJB.create(trackToBeCreated);
		if (isCreated) {
			successMessage = new FacesMessage(
					"The track was sucessfully added to library of musician");
			successMessage.setSeverity(FacesMessage.SEVERITY_INFO);
		} else {
			successMessage = new FacesMessage(
					"The track was not added. Check logs or contact administrator.");
			successMessage.setSeverity(FacesMessage.SEVERITY_ERROR);
		}
		facesContext.addMessage(null, successMessage);
	}

	public void addArtist() {
		getTrackToBeCreated().getArtists().add(artistOfAlbumWhoWillBeAdded);
	}

	public void removeArtist(Artist a) {
		getTrackToBeCreated().getArtists().remove(a);
	}

	public TrackEJB getTrackEJB() {
		return trackEJB;
	}

	public void setTrackEJB(TrackEJB trackEJB) {
		this.trackEJB = trackEJB;
	}

	public Track getTrackToBeCreated() {
		if (trackToBeCreated == null) {
			trackToBeCreated = new Track();

		}
		return trackToBeCreated;
	}

	public void setTrackToBeCreated(Track trackToBeCreated) {
		this.trackToBeCreated = trackToBeCreated;
	}

	public Artist getArtistOfAlbumWhoWillBeAdded() {
		return artistOfAlbumWhoWillBeAdded;
	}

	public void setArtistOfAlbumWhoWillBeAdded(Artist artistOfAlbum) {
		this.artistOfAlbumWhoWillBeAdded = artistOfAlbum;
	}


}
