package controller.authentication;


import java.io.Serializable;

import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;

import service.authentication.AuthenticationEJB;

@Named
@SessionScoped
public class AuthenticationController implements Serializable {
	private static final long serialVersionUID = 1L;

	@Inject
	private AuthenticationEJB authenticationEJB;

	private String userWhoWantsToLoginUsername;
	private String userWhoWantsToLoginPassword;
	private boolean userWhoWantsToLoginWantsToBeRemembered;

	public void loginWithRealm() {
		boolean loginWasSuccesful = authenticationEJB.loginWithRealm();
		FacesContext context = FacesContext.getCurrentInstance();
		if (loginWasSuccesful == false) {
			FacesMessage facesMessage = new FacesMessage(
					"There was problems with logging in!");
			context.addMessage("loginbutton:username", facesMessage);
			context.addMessage(null, facesMessage);
		}
	}

	public boolean loginWithUserNameAndPassword() {
		boolean loginSucceeded = authenticationEJB
				.loginWithUserNameAndPassword(userWhoWantsToLoginUsername,
						userWhoWantsToLoginPassword);
		if (userWhoWantsToLoginWantsToBeRemembered) {
//			FacesContext facesContext = FacesContext.getCurrentInstance();
//			Cookie userCookie = new Cookie("vtusername", username);
//			userCookie.setMaxAge(3600);
//			((HttpServletResponse) facesContext.getExternalContext()
//			       .getResponse()).addCookie(userCookie);
//			Cookie passCokie = new Cookie("vtpassword", password);
//			passCokie.setMaxAge(3600);
//			 ((HttpServletResponse) facesContext.getExternalContext()
//			       .getResponse()).addCookie(passCokie);
		}
		return loginSucceeded;
	}

	public void logout() {
		FacesContext.getCurrentInstance().getExternalContext()
				.invalidateSession();
	}

	public AuthenticationEJB getAuthenticationEJB() {
		return authenticationEJB;
	}

	public void setAuthenticationEJB(AuthenticationEJB userAuthenticationEJB) {
		this.authenticationEJB = userAuthenticationEJB;
	}

	public String getUserWhoWantsToLoginPassword() {
		return userWhoWantsToLoginPassword;
	}

	public void setUserWhoWantsToLoginPassword(
			String userWhoWantsToLoginPassword) {
		this.userWhoWantsToLoginPassword = userWhoWantsToLoginPassword;
	}

	public String getUserWhoWantsToLoginUsername() {
		return userWhoWantsToLoginUsername;
	}

	public void setUserWhoWantsToLoginUsername(
			String userWhoWantsToLoginUsername) {
		this.userWhoWantsToLoginUsername = userWhoWantsToLoginUsername;
	}

	public boolean isUserWhoWantsToLoginWantsToBeRemembered() {
		return userWhoWantsToLoginWantsToBeRemembered;
	}

	public void setUserWhoWantsToLoginWantsToBeRemembered(
			boolean userWhoWantsToLoginWantsToBeRemembered) {
		this.userWhoWantsToLoginWantsToBeRemembered = userWhoWantsToLoginWantsToBeRemembered;
	}

}
