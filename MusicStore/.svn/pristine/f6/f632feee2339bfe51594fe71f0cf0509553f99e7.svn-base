package controller.album;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;

import model.Album;
import model.Artist;
import model.Track;
import service.AlbumEJB;
import service.ArtistEJB;
import service.TrackEJB;

@Named
@SessionScoped
public class AlbumController implements Serializable {
	private static final long serialVersionUID = 1L;

	private Album albumToBeCreated;
	private Artist artistWhoWillBeAddedToTheAlbumToBeCreated;
	private Track trackThatIsAddedToTheAlbum;

	@Inject
	private ArtistEJB artistEJB;

	@Inject
	private AlbumEJB albumEJB;

	@Inject
	private TrackEJB trackEJB;

	public void save() {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		FacesMessage successMessage;
		boolean isCreated = getAlbumEJB().create(getAlbumToBeCreated());
		if (isCreated) {
			successMessage = new FacesMessage(
					"The album was succesfully created!");
			successMessage.setSeverity(FacesMessage.SEVERITY_INFO);
			albumToBeCreated = null;
		} else {
			successMessage = new FacesMessage("The album was not created!");
			successMessage.setSeverity(FacesMessage.SEVERITY_ERROR);
		}
		facesContext.addMessage(null, successMessage);
	}

	public Set<Album> getAlbumsByArtistId(long artistId) {
		Set<Album> albums = new HashSet<>();
		try {
			albums = artistEJB.find(artistId).getAlbums();
		} catch (Exception e) {
			if (albums.size() == 0) {
				Album album = new Album();
				album.setName("Artist does not exist / not selected!");
				albums.add(album);
			}
		}
		return albums;
	}

	public Set<Track> getTracksByArtists() {
		return trackEJB.getTracksByArtists(albumToBeCreated.getArtists());
	}

	public void addArtistToAlbumToBeCreated() {
		getAlbumToBeCreated().getArtists().add(
				artistWhoWillBeAddedToTheAlbumToBeCreated);
	}

	public void removeArtistFromAlbumToBeCreatedArtists(Artist a) {
		getAlbumToBeCreated().getArtists().remove(a);
	}

	public void addTrackToAlbum() {
		getAlbumToBeCreated().getTracks().add(trackThatIsAddedToTheAlbum);
	}

	public void removeTrackFromAlbum(Track track) {
		getAlbumToBeCreated().getTracks().remove(track);
	}

	// Getters, Setters

	public Album getAlbumToBeCreated() {
		if (albumToBeCreated == null) {
			albumToBeCreated = new Album();
		}
		return albumToBeCreated;
	}

	public void setAlbumToBeCreated(Album albumToBeCreated) {
		this.albumToBeCreated = albumToBeCreated;
	}

	public AlbumEJB getAlbumEJB() {
		return albumEJB;
	}

	public void setAlbumEJB(AlbumEJB albumEJB) {
		this.albumEJB = albumEJB;
	}

	public ArtistEJB getArtistEJB() {
		return artistEJB;
	}

	public void setArtistEJB(ArtistEJB artistEJB) {
		this.artistEJB = artistEJB;
	}

	public Artist getArtistWhoWillBeAddedToTheAlbumToBeCreated() {
		return artistWhoWillBeAddedToTheAlbumToBeCreated;
	}

	public void setArtistWhoWillBeAddedToTheAlbumToBeCreated(
			Artist artistToBeAddedToTheAlbumToBeCreated) {
		this.artistWhoWillBeAddedToTheAlbumToBeCreated = artistToBeAddedToTheAlbumToBeCreated;
	}

	public TrackEJB getTrackEJB() {
		return trackEJB;
	}

	public void setTrackEJB(TrackEJB trackEJB) {
		this.trackEJB = trackEJB;
	}

	public Track getTrackThatIsAddedToTheAlbum() {
		return trackThatIsAddedToTheAlbum;
	}

	public void setTrackThatIsAddedToTheAlbum(
			Track trackWhoWillBeAddedToTheAlbumToBeCreated) {
		this.trackThatIsAddedToTheAlbum = trackWhoWillBeAddedToTheAlbumToBeCreated;
	}

}
